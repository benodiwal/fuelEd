// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id    String  @id @default(cuid())
  name  String
  email String  @unique

  vendors Vendor[]
  guests Guest[]
  hosts Host[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Host {
  id    String  @id @default(cuid())
  name  String
  email String

  user User @relation(fields: [userId], references: [id])
  userId String 
  
  channelParticipants ChannelParticipant[]
  events Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Guest {
  id    String  @id @default(cuid())
  name  String
  email String
  phone String?
  
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  rsvps RSVP?

  channelParticipants ChannelParticipant[]
  events Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventPost {
  id String @id @default(cuid())
  heading String
  description String
  sendEmail Boolean
  eventId String

  event Event @relation(fields: [eventId], references: [id])
}

model EventPoll {
  id String @id @default(cuid())
  heading String
  description String
  sendEmail Boolean
  allowMultiple Boolean
  eventId String
  options EventPollOptions[]

  event Event @relation(fields: [eventId], references: [id])
}

model EventPollOptions {
  id String @id @default(cuid())
  text String
  count Int @default(0)
  eventPollId String

  eventPoll EventPoll @relation(fields: [eventPollId], references: [id])
}

model Vendor{
  id    String  @id @default(cuid())
  name  String
  email String
  phone String?
  vendorType VendorType?
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  contract Contract?

  channelParticipants ChannelParticipant[]
  events Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contract {
  id    String  @id @default(cuid())
  vendorId String @unique
  contractData String
  signedByHost Boolean @default(true)
  signedByVendor Boolean @default(false)
  vendor Vendor @relation(fields: [vendorId], references: [id])
}

model RSVP{
  id    String  @id @default(cuid())
  status RSVPStatus @default(PENDING)
  
  event Event @relation(fields: [eventId], references: [id])
  eventId String @unique

  guest Guest @relation(fields: [guestId], references: [id])
  guestId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id    String  @id @default(cuid())
  title  String
  description String

  startDate  String
  endDate    String
  startTime  String

  rsvps RSVP[]
  invites Invite[]
  guests Guest[]
  vendors Vendor[]
  eventPosts EventPost[]
  eventPolls EventPoll[]
  venue Venue?
  eventHostMessage EventHostMessage?
  channels Channel[]
  eventFloorPlan EventFloorPlan[]

  host  Host    @relation(fields: [hostId], references: [id])
  hostId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventFloorPlan {
  id    String  @id @default(cuid())
  floorPlanJson Json

  eventId String @unique
  event Event @relation(fields: [eventId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 



model EventHostMessage{
  id    String  @id @default(cuid())
  message String

  event Event @relation(fields: [eventId], references: [id])
  eventId String @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Venue {
  id    String  @id @default(cuid())
  name  String

  address String
  zipCode String
  city String
  state String

  event Event @relation(fields: [eventId], references: [id])
  eventId String @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id    String  @id @default(cuid())
  status InviteStatus @default(PENDING)
  email String
  event Event @relation(fields: [eventId], references: [id])
  eventId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id String @id @default(cuid())
  name String
  channelType ChannelType @default(PUBLIC)
  channelParticipants ChannelParticipant[]
  channelMessages ChannelMessage[]

  eventId String
  event Event @relation(fields: [eventId], references: [id])
}

model ChannelParticipant {
  id String @id @default(cuid())
  roleId String @unique
  role Role
  host Host? @relation(fields: [roleId], references: [id], map: "ChannelParticipant_hostId_fkey")
  guest Guest? @relation(fields: [roleId], references: [id], map: "ChannelParticipant_guestId_fkey")
  vendor Vendor? @relation(fields: [roleId], references: [id], map: "ChannelParticipant_vendorId_fkey")

  channelId String
  channel Channel @relation(fields: [channelId], references: [id])

  channelMessages ChannelMessage[]
}

model ChannelMessage {
  id String @id @default(cuid())  
  message String
  timestamp DateTime @default(now())

  channelId String
  senderId String

  channel Channel @relation(fields: [channelId], references: [id])
  sender ChannelParticipant @relation(fields: [senderId], references: [id])
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT
}

enum VendorType {
  CATERER
  PHOTOGRAPHER
  DJ
  DECORATOR
  PLANNER
  FLORIST
  BAKER
  OTHER
  VENUE
}

enum InviteStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Role {
  HOST
  GUEST
  VENDOR
}
