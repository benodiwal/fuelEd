// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id    String  @id @default(cuid())
  name  String
  email String  @unique
  sub   String  @unique

  vendors Vendor[]
  guests Guest[]
  hosts Host[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Host {
  id    String  @id @default(cuid())
  name  String
  email String

  user User @relation(fields: [userId], references: [id])
  userId String @unique

  events Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Guest {
  id    String  @id @default(cuid())
  name  String
  email String
  phone String?
  
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  rsvps RSVP?

  events Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Annoucement{
  id    String  @id @default(cuid())
  title String
  body  String
  date  DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor{
  id    String  @id @default(cuid())
  name  String
  email String
  phone String?
  vendorType VendorType?
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  events Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Répondez s'il vous plaît
model RSVP{
  id    String  @id @default(cuid())
  status RSVPStatus @default(PENDING)
  
  event Event @relation(fields: [eventId], references: [id])
  eventId String @unique

  guest Guest @relation(fields: [guestId], references: [id])
  guestId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id    String  @id @default(cuid())
  name  String
  startDate  DateTime
  endDate    DateTime

  rsvps RSVP[]
  invites Invite[]
  guests Guest[]
  vendors Vendor[]

  host  Host    @relation(fields: [hostId], references: [id])
  hostId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Invite {
  id    String  @id @default(cuid())
  status InviteStatus @default(PENDING)
  email String
  event Event @relation(fields: [eventId], references: [id])
  eventId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VendorType {
  CATERER
  PHOTOGRAPHER
  DJ
  DECORATOR
  PLANNER
  FLORIST
  BAKER
  OTHER
  VENUE
}

enum InviteStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
enum RSVPStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
